// <auto-generated />
using System;
using DataAccessElevatorSim;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElevatorSim.Migrations
{
    [DbContext(typeof(ElevatorSimContext))]
    [Migration("20240417234116_webdes28_ElevatorSimDb")]
    partial class webdes28_ElevatorSimDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessElevatorSim.Models.entBuilding", b =>
                {
                    b.Property<int>("entBuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entBuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("entBuildingId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevator", b =>
                {
                    b.Property<int>("entElevatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entElevatorId"));

                    b.Property<int>("CurrentFloorentFloorId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLoadCount")
                        .HasColumnType("int");

                    b.Property<string>("ElevatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElevatorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShaftentShaftId")
                        .HasColumnType("int");

                    b.Property<bool>("blnIsGoingUp")
                        .HasColumnType("bit");

                    b.Property<bool>("blnIsMoving")
                        .HasColumnType("bit");

                    b.HasKey("entElevatorId");

                    b.HasIndex("CurrentFloorentFloorId");

                    b.HasIndex("ShaftentShaftId");

                    b.ToTable("Elevator");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevatorType", b =>
                {
                    b.Property<int>("entElevatorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entElevatorTypeId"));

                    b.Property<string>("ElevatorTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElevatorTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoadTypeentLoadTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.HasKey("entElevatorTypeId");

                    b.HasIndex("LoadTypeentLoadTypeId");

                    b.ToTable("ElevatorType");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entFloor", b =>
                {
                    b.Property<int>("entFloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entFloorId"));

                    b.Property<string>("FloorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("entBuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("entShaftId")
                        .HasColumnType("int");

                    b.HasKey("entFloorId");

                    b.HasIndex("entBuildingId");

                    b.HasIndex("entShaftId");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entLoadType", b =>
                {
                    b.Property<int>("entLoadTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entLoadTypeId"));

                    b.Property<string>("LoadDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("entLoadTypeId");

                    b.ToTable("LoadType");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entShaft", b =>
                {
                    b.Property<int>("entShaftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entShaftId"));

                    b.Property<string>("ShaftDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("entBuildingId")
                        .HasColumnType("int");

                    b.HasKey("entShaftId");

                    b.HasIndex("entBuildingId");

                    b.ToTable("Shaft");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevator", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entFloor", "CurrentFloor")
                        .WithMany()
                        .HasForeignKey("CurrentFloorentFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessElevatorSim.Models.entShaft", "Shaft")
                        .WithMany()
                        .HasForeignKey("ShaftentShaftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentFloor");

                    b.Navigation("Shaft");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevatorType", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entLoadType", "LoadType")
                        .WithMany()
                        .HasForeignKey("LoadTypeentLoadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoadType");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entFloor", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entBuilding", null)
                        .WithMany("Floors")
                        .HasForeignKey("entBuildingId");

                    b.HasOne("DataAccessElevatorSim.Models.entShaft", null)
                        .WithMany("AllowedFloors")
                        .HasForeignKey("entShaftId");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entShaft", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entBuilding", null)
                        .WithMany("Shafts")
                        .HasForeignKey("entBuildingId");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entBuilding", b =>
                {
                    b.Navigation("Floors");

                    b.Navigation("Shafts");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entShaft", b =>
                {
                    b.Navigation("AllowedFloors");
                });
#pragma warning restore 612, 618
        }
    }
}
