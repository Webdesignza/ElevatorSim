// <auto-generated />
using DataAccessElevatorSim;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElevatorSim.Migrations
{
    [DbContext(typeof(ElevatorSimContext))]
    [Migration("20240422151036_ElevatorSimDb")]
    partial class ElevatorSimDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessElevatorSim.Models.entBuilding", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevator", b =>
                {
                    b.Property<int>("ElevatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElevatorId"));

                    b.Property<int>("CurrentFloorFloorId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLoadCount")
                        .HasColumnType("int");

                    b.Property<string>("ElevatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevatorTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGoingUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("bit");

                    b.Property<int>("ShaftId")
                        .HasColumnType("int");

                    b.HasKey("ElevatorId");

                    b.HasIndex("CurrentFloorFloorId");

                    b.HasIndex("ElevatorTypeId");

                    b.HasIndex("ShaftId");

                    b.ToTable("Elevator");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevatorType", b =>
                {
                    b.Property<int>("ElevatorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElevatorTypeId"));

                    b.Property<string>("ElevatorTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElevatorTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoadTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.HasKey("ElevatorTypeId");

                    b.HasIndex("LoadTypeId");

                    b.ToTable("ElevatorType");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entErrors", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorId"));

                    b.Property<string>("ErrorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entFloor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("FloorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FloorId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entLoadType", b =>
                {
                    b.Property<int>("LoadTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoadTypeId"));

                    b.Property<string>("LoadDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoadTypeId");

                    b.ToTable("LoadType");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entShaft", b =>
                {
                    b.Property<int>("ShaftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShaftId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ShaftDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShaftId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Shaft");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevator", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entFloor", "CurrentFloor")
                        .WithMany()
                        .HasForeignKey("CurrentFloorFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessElevatorSim.Models.entElevatorType", "ElevatorType")
                        .WithMany()
                        .HasForeignKey("ElevatorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessElevatorSim.Models.entShaft", "Shaft")
                        .WithMany()
                        .HasForeignKey("ShaftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentFloor");

                    b.Navigation("ElevatorType");

                    b.Navigation("Shaft");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entElevatorType", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entLoadType", "LoadType")
                        .WithMany()
                        .HasForeignKey("LoadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoadType");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entFloor", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entBuilding", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("DataAccessElevatorSim.Models.entShaft", b =>
                {
                    b.HasOne("DataAccessElevatorSim.Models.entBuilding", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });
#pragma warning restore 612, 618
        }
    }
}
